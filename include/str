// <libmisc> -*- C -*-
// The MIT License (MIT)
//
// Copyright (c) 2015 Jeremy Letang & Valentin Trinque
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#import <stdio.h>
#import <string.h>
#import <stdbool.h>

#import <option>

typedef struct {
    int (*println)(char*);
    int (*print)(char*);
    unsigned (*len)(char*);
    char_option (*get)(char*, unsigned);
    bool (*set)(char*, int, char);
    char* (*create)(int);
    char* (*make)(int, char);
    char* (*copy)(char*);
    char* (*init)(int, char(*)(int));
    void (*fill)(char*, int, int, char);
    char* (*concat)(char*, char**);
    void (*iter)(char*, void(*)(char));
    void (*iteri)(char*, void(*)(int, char));
    char* (*map)(char(*)(char), char*);
    char* (*mapi)(char(*)(int, char), char*);
    char* (*trim)(char*);
    int (*index_)(char*, char);
    int (*rindex_)(char*, char);
    int (*index_from)(char*, int, char);
    int (*rindex_from)(char*, int, char);
    bool (*contains)(char*, char);
    bool (*contains_from)(char*, int, char);
    bool (*rcontains_from)(char*, int, char);
    char* (*uppercase)(char*);
    char* (*lowercase)(char*);
    char* (*capitalize)(char*);
    char* (*uncapitalize)(char*);
    int (*compare)(char*, char*);
} str_mod;

int println(char*);
int print(char*);
unsigned len(char*);
char_option get(char*, unsigned);
bool set(char*, int, char);
char* create(int);
char* make(int, char);
char* copy(char*);
char* init(int, char(*)(int));
void fill(char*, int, int, char);
char* concat(char*, char**);
void iter(char*, void(*)(char));
void iteri(char*, void(*)(int, char));
char* map(char(*)(char), char*);
char* mapi(char(*)(int, char), char*);
char* trim(char*);
int index_(char*, char);
int rindex_(char*, char);
int index_from(char*, int, char);
int rindex_from(char*, int, char);
bool contains(char*, char);
bool contains_from(char*, int, char);
bool rcontains_from(char*, int, char);
char* uppercase(char*);
char* lowercase(char*);
char* capitalize(char*);
char* uncapitalize(char*);
int compare(char*, char*);

extern const str_mod Str;
