// <libmisc> -*- C -*-
// The MIT License (MIT)
//
// Copyright (c) 2015 Jeremy Letang
// Copyright (c) 2015 Valentin Trinque
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#ifndef MISC_CORE_STR
#define MISC_CORE_STR

#include <option>
#include <result>
#include <prelude>

#include <stdio.h>
#include <string.h>
#include <stdbool.h>

typedef enum {
    out_of_bounds,
    max_length,
    null_ptr
} misc_str_error;

$make_common_result(misc_str_error);

#define $str_result(type) $result(type, misc_str_error)

mod {
    int (*println)(str);
    $str_result(size_t) (*len)(const str);
    $option(char) (*get)(str, size_t);
    bool (*set)(str, int, char);
    $option(str) (*create)(size_t);
    $option(str) (*make)(size_t, char);
    void (*drop)(str);
    $option(str) (*copy)(str);
    $option(str) (*init)(size_t, char(*)(int));
    bool (*fill)(str, size_t, size_t, char);
    $option(str) (*concat)(str, str*);
    void (*iter)(str, void(*)(char));
    void (*iteri)(str, void(*)(size_t, char));
    $option(str) (*map)(char(*)(char), str);
    $option(str) (*mapi)(char(*)(int, char), str);
    $option(str) (*trim)(str);
    $option(size_t) (*index_from)(const str, size_t, char);
    $option(size_t) (*rindex_from)(const str, size_t, char);
    $option(size_t) (*index)(const str, char);
    $option(size_t) (*rindex)(const str, char);
    bool (*contains)(str, char);
    bool (*contains_from)(str, int, char);
    bool (*rcontains_from)(str, int, char);
    $option(str) (*uppercase)(str);
    $option(str) (*lowercase)(str);
    $option(str) (*capitalize)(str);
    $option(str) (*uncapitalize)(str);
    $option(str) (*compare)(str, str);
} str_mod;

export str_mod Str;

#endif
